/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bilgaglariproje;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Properties;
import javax.mail.Address;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.Session;
import javax.mail.Store;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elifserraunal
 */
public class Outbox extends javax.swing.JFrame {

    /**
     * Creates new form GelenKutusu
     */
    String usermail;
    String userpassword;
    DefaultTableModel tableModel = new DefaultTableModel();

    /**
     * Creates new form GonderilenKutusu
     */
    public Outbox(String username, String password) {
        this.usermail = username;
        this.userpassword = password;
        initComponents();
        tableModel.addColumn("To");
        tableModel.addColumn("Subject");
        tableModel.addColumn("Sent Date");
    }

    public Outbox() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btn_menuyedon = new javax.swing.JButton();
        refresh_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        OutboxTable = new javax.swing.JTable();
        OpenSelected_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Outbox");

        btn_menuyedon.setText("Cancel");
        btn_menuyedon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menuyedonActionPerformed(evt);
            }
        });

        refresh_btn.setText("Refresh");
        refresh_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_btnActionPerformed(evt);
            }
        });

        OutboxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "To", "Subject", "Sent Date"
            }
        ));
        jScrollPane2.setViewportView(OutboxTable);

        OpenSelected_btn.setText("Open Selected");
        OpenSelected_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenSelected_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(615, 615, 615)
                        .addComponent(btn_menuyedon))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(refresh_btn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(OpenSelected_btn))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btn_menuyedon))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenSelected_btn)
                    .addComponent(refresh_btn))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refresh_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_btnActionPerformed
        // TODO add your handling code here:
        int tablemodelsize = tableModel.getRowCount();
        for (int i = 0; i < tablemodelsize; i++) {
            tableModel.removeRow(0);
        }
        /* POP3
        String host = "pop.gmail.com";
        String mailStoreType = "pop3";
        try {
            // create properties field
            Properties properties = new Properties();
            properties.put("mail.store.protocol", "pop3");
            properties.put("mail.pop3.host", host);
            properties.put("mail.pop3.port", "995");
            properties.put("mail.pop3.starttls.enable", "true");
            Session emailSession = Session.getDefaultInstance(properties);
            // emailSession.setDebug(true);

            // create the POP3 store object and connect with the pop server
            Store store = emailSession.getStore("pop3s");

            store.connect(host, usermail, userpassword);

            // create the folder object and open it
            Folder emailFolder = store.getFolder("INBOX");
            emailFolder.open(Folder.READ_ONLY);
         */

        Properties props = System.getProperties();
        props.setProperty("mail.store.protocol", "imaps");
        try {
            /*  Create the session and get the store for read the mail. */
            Session session = Session.getDefaultInstance(props, null);
            Store store = session.getStore("imaps");
            System.out.println(store);
            store.connect("imap.gmail.com", usermail, userpassword);

            /*  Mention the folder name which you want to read. */
            Folder sentfolder = store.getFolder("[Gmail]/Gönderilmiş Postalar");
            //System.out.println("No of Sent Messages : " + sent.getMessageCount());

            /*Open the inbox using store.*/
            sentfolder.open(Folder.READ_ONLY);

            /*  Get the messages which is unread in the Sent Mails*/
            //Message messages[] = sent.search(new FlagTerm(new Flags(Flag.SEEN), true))
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

            // retrieve the messages from the folder in an array and print it
            Message[] messages = sentfolder.getMessages();
            System.out.println("messages.length---" + messages.length);

            //for (int i = messages.length - 1; i > messages.length - 10; i--) {
            for (int i = messages.length - 1; i >= messages.length - 10; i--) {
                Message message = messages[i];
                System.out.println("---------------------------------");
                writeEnvelope(message);
            }
            OutboxTable.setModel(tableModel);

            // close the store and folder objects
            sentfolder.close(false);
            store.close();

        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        } catch (MessagingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_refresh_btnActionPerformed

    private void OpenSelected_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenSelected_btnActionPerformed
        // TODO add your handling code here:
        if (OutboxTable.getSelectedRow() >= 0) {
            Properties props = System.getProperties();
            props.setProperty("mail.store.protocol", "imaps");
            try {
                /*  Create the session and get the store for read the mail. */
                Session session = Session.getDefaultInstance(props, null);
                Store store = session.getStore("imaps");
                System.out.println(store);
                store.connect("imap.gmail.com", usermail, userpassword);

                /*  Mention the folder name which you want to read. */
                Folder sentfolder = store.getFolder("[Gmail]/Gönderilmiş Postalar");
                //System.out.println("No of Sent Messages : " + sent.getMessageCount());

                /*Open the inbox using store.*/
                sentfolder.open(Folder.READ_ONLY);

                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

                // retrieve the messages from the folder in an array and print it
                Message[] messages = sentfolder.getMessages();
                System.out.println("messages.length---" + messages.length);

                Message message = messages[messages.length - OutboxTable.getSelectedRow() - 1];
                System.out.println("---------------------------------");
                MailReviewScreen mynewreviescren = new MailReviewScreen(message);
                mynewreviescren.setVisible(true);

                // close the store and folder objects
                sentfolder.close(false);
                store.close();

            } catch (NoSuchProviderException e) {
                e.printStackTrace();
            } catch (MessagingException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_OpenSelected_btnActionPerformed

    private void btn_menuyedonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menuyedonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_menuyedonActionPerformed
    public void writeEnvelope(Message m) throws Exception {
        System.out.println("This is the message envelope");
        System.out.println("---------------------------");
        Address[] a;

        String to_str = "";
        String subject_str = "";
        String date_str = "";
        /*
        if ((a = m.getFrom()) != null) {
            for (int j = 0; j < a.length; j++) {
                from_str = from_str + a[j].toString() + "---";
            }
        }
         */

        // TO
        if ((a = m.getRecipients(Message.RecipientType.TO)) != null) {
            for (int j = 0; j < a.length; j++) {
                to_str = to_str + a[j].toString() + "---";
            }
        }

        // SUBJECT
        if (m.getSubject() != null) {
            subject_str = m.getSubject();
        }

        if (m.getSentDate() != null) {
            date_str = m.getSentDate().toString();
        }

        tableModel.addRow(new Object[]{to_str, subject_str, date_str});

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Outbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Outbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Outbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Outbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Outbox().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OpenSelected_btn;
    private javax.swing.JTable OutboxTable;
    private javax.swing.JButton btn_menuyedon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refresh_btn;
    // End of variables declaration//GEN-END:variables
}
