/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bilgaglariproje;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Date;
import java.util.Properties;
import javax.mail.Address;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.Part;
import javax.mail.Session;
import javax.mail.Store;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elifserraunal
 */
public class Inbox extends javax.swing.JFrame {

    String usermail;
    String userpassword;
    DefaultTableModel tableModel = new DefaultTableModel();

    /**
     * Creates new form GonderilenKutusu
     */
    public Inbox(String username, String password) {
        this.usermail = username;
        this.userpassword = password;
        initComponents();
        tableModel.addColumn("From");
        tableModel.addColumn("Subject");
        tableModel.addColumn("Sent Date");
    }

    public Inbox() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cancel_btn = new javax.swing.JButton();
        Refresh_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        InboxTable = new javax.swing.JTable();
        openselected_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setText("Inbox");

        cancel_btn.setText("Cancel");
        cancel_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_btnActionPerformed(evt);
            }
        });

        Refresh_btn.setText("Refresh");
        Refresh_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_btnActionPerformed(evt);
            }
        });

        InboxTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "From", "Subject", "Sent Date"
            }
        ));
        jScrollPane2.setViewportView(InboxTable);

        openselected_btn.setText("Open Selected");
        openselected_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openselected_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Refresh_btn)
                        .addGap(647, 647, 647)
                        .addComponent(openselected_btn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancel_btn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cancel_btn))
                .addGap(73, 73, 73)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Refresh_btn)
                    .addComponent(openselected_btn))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Refresh_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_btnActionPerformed
        // TODO add your handling code here:
        int tablemodelsize = tableModel.getRowCount();
        for (int i = 0; i < tablemodelsize; i++) {
            tableModel.removeRow(0);
        }
        Properties props = System.getProperties();
        props.setProperty("mail.store.protocol", "imaps");
        try {
            /*  Create the session and get the store for read the mail. */
            Session session = Session.getDefaultInstance(props, null);
            Store store = session.getStore("imaps");
            System.out.println(store);
            store.connect("imap.gmail.com", usermail, userpassword);

            /*  Mention the folder name which you want to read. */
            Folder InboxFolder = store.getFolder("INBOX");

            /*Open the inbox using store.*/
            InboxFolder.open(Folder.READ_ONLY);

            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

            // retrieve the messages from the folder in an array and print it
            Message[] messages = InboxFolder.getMessages();
            System.out.println("messages.length---" + messages.length);

            for (int i = messages.length - 1; i >= messages.length - 8; i--) {
                Message message = messages[i];
                System.out.println("---------------------------------");
                writeEnvelope(message);
            }
            InboxTable.setModel(tableModel);

            // close the store and folder objects
            InboxFolder.close(false);
            store.close();
            
        } catch (NoSuchProviderException e) {
            e.printStackTrace();
        } catch (MessagingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_Refresh_btnActionPerformed

    private void openselected_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openselected_btnActionPerformed
        // TODO add your handling code here:

        if (InboxTable.getSelectedRow() >= 0) {
            Properties props = System.getProperties();
            props.setProperty("mail.store.protocol", "imaps");
            try {
                /*  Create the session and get the store for read the mail. */
                Session session = Session.getDefaultInstance(props, null);
                Store store = session.getStore("imaps");
                System.out.println(store);
                store.connect("imap.gmail.com", usermail, userpassword);

                /*  Mention the folder name which you want to read. */
                Folder inboxfolder = store.getFolder("INBOX");
                //System.out.println("No of Sent Messages : " + sent.getMessageCount());

                /*Open the inbox using store.*/
                inboxfolder.open(Folder.READ_ONLY);

                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

                // retrieve the messages from the folder in an array and print it
                Message[] messages = inboxfolder.getMessages();
                System.out.println("messages.length---" + messages.length);

                Message message = messages[messages.length - InboxTable.getSelectedRow() - 1];
                System.out.println("---------------------------------");
                MailReviewScreen mynewreviescren = new MailReviewScreen(message);
                mynewreviescren.setVisible(true);

                // close the store and folder objects
                inboxfolder.close(false);
                store.close();                               
                
            } catch (NoSuchProviderException e) {
                e.printStackTrace();
            } catch (MessagingException e) {
                e.printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }


    }//GEN-LAST:event_openselected_btnActionPerformed

    private void cancel_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_btnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancel_btnActionPerformed

 /*
   * This method would print FROM,TO and SUBJECT of the message
     */
    public void writeEnvelope(Message m) throws Exception {
        System.out.println("This is the message envelope");
        System.out.println("---------------------------");
        Address[] a;

        String from_str = "";
        String subject_str = "";
        String date_str = "";

        if ((a = m.getFrom()) != null) {
            for (int j = 0; j < a.length; j++) {
                from_str = from_str + a[j].toString() + "---";
            }
        }

        /* TO
        if ((a = m.getRecipients(Message.RecipientType.TO)) != null) {
            for (int j = 0; j < a.length; j++) {
                System.out.println("TO: " + a[j].toString());
            }
        }
         */
        // SUBJECT
        if (m.getSubject() != null) {
            subject_str = m.getSubject();
        }

        if (m.getSentDate() != null) {
            date_str = m.getSentDate().toString();
        }

        tableModel.addRow(new Object[]{from_str, subject_str, date_str});

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inbox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inbox().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InboxTable;
    private javax.swing.JButton Refresh_btn;
    private javax.swing.JButton cancel_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton openselected_btn;
    // End of variables declaration//GEN-END:variables
}
